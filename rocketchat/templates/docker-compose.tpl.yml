{% set var_local = params.local | bool %}

{% set var_is_web = params.pod_type in ['app', 'web'] %}
{% set var_use_nginx = var_is_web and (params.use_nginx | bool) %}
{% set var_use_rocketchat = var_is_web %}
{% set var_use_bot = var_is_web and (params.use_bot | bool) %}
{% set var_use_mongo_express = var_is_web and (params.use_mongo_express | bool) %}
{% set var_use_theia = var_is_web and (params.use_theia | bool) %}
{% set var_use_minio_gateway = var_is_web and (params.use_minio_gateway | bool) %}

{% set var_is_db = params.pod_type in ['app', 'db'] %}
{% set var_use_mongo = var_is_db %}

{% set var_use_s3 = params.use_s3 | bool %}
{% set var_use_local_s3 = params.use_local_s3 | bool %}
{% set var_use_internal_fluentd = params.use_internal_fluentd | bool %}
{% set var_fluentd_ssl =
  (params.fluentd_output_plugin == 'elasticsearch')
  and
  (params.use_secure_elasticsearch | bool)
%}

{################################################################################################}
{% macro include_scripts() %}

    - "./run:{{ params.inner_scripts_dir }}/run:ro"
    - "./env/vars.inner.sh:{{ params.inner_scripts_dir }}/vars.sh:ro"
    - "./main/scripts:{{ params.inner_scripts_dir }}/main/scripts:ro"
    - "./shared/scripts:{{ params.inner_scripts_dir }}/shared/scripts:ro"
    - "./{{ params.main_real_dir }}/scripts:{{ params.inner_scripts_dir }}/{{ params.main_real_dir }}/scripts:ro"

{% endmacro %}
{################################################################################################}

version: '2.4'

x-logging:

  {#############################################################}
  {% if params.use_fluentd | bool %}

  mainlog: &mainlog
    driver: "fluentd"
    options:
      tag: "{% raw %}container.{{.Name}}{% endraw %}"
      fluentd-address: "localhost:{{ params.fluentd_port }}"
  jsonlog: &jsonlog
    driver: "json-file"
    options:
      max-size: "50m"

  {% else %}

  mainlog: &mainlog
    driver: "json-file"
    options:
      max-size: "50m"

  {% endif %}
  {#############################################################}

networks:

  {#############################################################}
  {% if var_use_internal_fluentd %}

  log:
    driver: "bridge"

  {% endif %}
  {#############################################################}

  shared:
    external: true
    name: "{{ params.shared_network }}"

{#############################################################}
{% if (params.local | bool) and (params.named_volumes | bool) %}

volumes:
  uploads: {}
  mongo_db: {}

{% endif %}
{#############################################################}

{#############################################################}
{% if params.use_secrets | bool %}

secrets:
  empty:
    file: "$DATA_DIR/secrets/empty.txt"

  {#############################################################}
  {% if var_use_minio_gateway %}

  minio_gateway_access_key:
    file: "$DATA_DIR/secrets/minio_gateway_access_key.txt"
  minio_gateway_secret_key:
    file: "$DATA_DIR/secrets/minio_gateway_secret_key.txt"

  {% endif %}
  {#############################################################}

  {#############################################################}
  {% if var_use_local_s3 %}

  local_s3_access_key:
    file: "$DATA_DIR/secrets/local_s3_access_key.txt"
  local_s3_secret_key:
    file: "$DATA_DIR/secrets/local_s3_secret_key.txt"

  {% endif %}
  {#############################################################}

  {#############################################################}
  {% if var_use_mongo %}

  db_root_pass:
    file: "$DATA_DIR/secrets/db_root_pass.txt"

  {% endif %}
  {#############################################################}

  {#############################################################}
  {% if var_use_mongo_express %}

  db_gui_password:
    file: "$DATA_DIR/secrets/db_gui_password.txt"

  {% endif %}
  {#############################################################}

{% endif %}
{#############################################################}

services:

  {#############################################################}
  {% if var_use_nginx %}

  nginx:
    container_name: "${CTX_PREFIX_MAIN}nginx"
    hostname: "nginx"
    build:
      context: .
      dockerfile: "shared/containers/nginx/Dockerfile"
      args:
        IMAGE: "{{ params.images.nginx }}"
    restart: "unless-stopped"

    {#############################################################}
    {% if var_use_internal_fluentd %}

    depends_on:
    - "fluentd"

    {% endif %}
    {#############################################################}

    ports:
    - "{{ params.ports.public_http_port }}:80"
    - "{{ params.ports.public_https_port }}:443"
    - "{{ params.ports.private_http_port }}:9080"
    - "{{ params.ports.private_https_port }}:9443"
    networks:
    - "shared"

    {#############################################################}
    {% if var_local %}

    extra_hosts:
      host.docker.internal: host-gateway

    {% endif %}
    {#############################################################}

    volumes:

    {#############################################################}
    {% if params.use_custom_ssl | default(false) | bool %}

    - "./env/certbot/etc:/etc/ssl:ro"

    {% elif params.use_certbot | default(false) | bool %}

    - "$DATA_DIR/sync/certbot/etc:/etc/ssl:ro"

    {% endif %}
    {#############################################################}

    - "$DATA_DIR/sync/certbot/www:/var/www/certbot:ro"
    - "$DATA_DIR/sync/nginx:/var/main/data/sync/nginx:ro"
    - "$DATA_DIR/tmp/nginx:/tmp/main/nginx"
    - "$DATA_DIR/tmp/tmp/nginx:/tmp/main/tmp/nginx"
    logging: *mainlog

    {#############################################################}
    {% if (params.memory.nginx | default('')) != '' %}

    mem_limit: "{{ params.memory.nginx }}"

    {% endif %}
    {#############################################################}

  {% endif %}
  {#############################################################}

  {#############################################################}
  {% if var_use_rocketchat %}

  rocketchat:
    container_name: "${CTX_PREFIX_MAIN}rocketchat"
    hostname: "rocketchat"
    build:
      context: .
      dockerfile: "{{ params.main_dir }}/containers/rocketchat/Dockerfile"
      args:
        IMAGE: "{{ params.images.rocketchat }}"
    restart: "unless-stopped"

    {#############################################################}
    {% if var_use_internal_fluentd or (params.pod_type == 'app') %}

    depends_on:

      {#############################################################}
    {% if var_use_internal_fluentd %}

    - "fluentd"

    {% endif %}
    {#############################################################}

    {#############################################################}
    {% if params.pod_type == 'app' %}

    - "mongo"

    {% endif %}
    {#############################################################}

    {% endif %}
    {#############################################################}

    environment:
    - PORT=3000
    - ROOT_URL=http://localhost:3000
    - MONGO_URL=mongodb://{{ params.db_user }}:$DB_PASSWORD@{{ params.db_host }}:{{ params.db_port }}/{{ params.db_name }}?authSource=admin
    - MONGO_OPLOG_URL=mongodb://oploguser:$DB_OPLOG_PASSWORD@{{ params.db_host }}:{{ params.db_port }}/local?authSource=admin
    - MAIL_URL={{ params.rocketchat.mail_url | default('') }}
    - CDN_PREFIX={{ params.rocketchat.cdn_prefix | default('') }}
    - CDN_JSCSS_PREFIX={{ params.rocketchat.cdn_prefix | default('') }}

    {#############################################################}
    {% if params.rocketchat.block_default_settings | bool %}

    - SETTINGS_BLOCKED=FileUpload_Storage_Type,FileUpload_S3_Bucket,FileUpload_S3_Region,FileUpload_S3_BucketURL,FileUpload_FileSystemPath

    {% endif %}
    {#############################################################}

    - FileUpload_Storage_Type={{ params.rocketchat.storage_type }}
    - FileUpload_FileSystemPath=/app/uploads

    {#############################################################}
    {% if params.rocketchat.storage_type == 'AmazonS3' %}

    - FileUpload_S3_Bucket={{ params.rocketchat.fileupload_s3_bucket }}
    - FileUpload_S3_Region={{ params.rocketchat.fileupload_s3_region }}
    - FileUpload_S3_BucketURL={{ params.rocketchat.fileupload_s3_bucket_url }}
    - FileUpload_S3_Acl={{ params.rocketchat.fileupload_s3_acl }}
    - FileUpload_S3_CDN={{ params.rocketchat.fileupload_s3_cdn }}
    - FileUpload_S3_AWSAccessKeyId=$ROCKETCHAT_FILEUPLOAD_S3_ACCESS_KEY
    - FileUpload_S3_AWSSecretAccessKey=$ROCKETCHAT_FILEUPLOAD_S3_SECRET_KEY

    {% endif %}
    {#############################################################}

    networks:
    - "shared"

    {#############################################################}
    {% if var_use_nginx %}

    expose:
    - "3000"

    {% else %}

    ports:
    - "{{ params.ports.public_http_port }}:3000"

    {% endif %}
    {#############################################################}

    {#############################################################}
    {% if var_local %}

    extra_hosts:
      host.docker.internal: host-gateway

    {% endif %}
    {#############################################################}

    volumes:

    {#############################################################}
    {% if (params.local | bool) and (params.named_volumes | bool) %}

    - "uploads:/app/uploads"

    {% else %}

    - "$DATA_DIR/rocketchat/uploads:/app/uploads"

    {% endif %}
    {#############################################################}

    command: >
      bash -c
        "for i in `seq 1 30`; do
          node main.js &&
          s=$$? && break || s=$$?;
          echo \"Tried $$i times. Waiting 5 secs...\";
          sleep 5;
        done; (exit $$s)"
    logging: *mainlog

    {#############################################################}
    {% if (params.memory.rocketchat | default('')) != '' %}

    mem_limit: "{{ params.memory.rocketchat }}"

    {% endif %}
    {#############################################################}

  {% endif %}
  {#############################################################}

  {#############################################################}
  {% if var_use_bot %}

  hubot:
    container_name: "${CTX_PREFIX_MAIN}hubot"
    hostname: "hubot"
    build:
      context: .
      dockerfile: "{{ params.main_dir }}/containers/hubot/Dockerfile"
      args:
        IMAGE: "{{ params.images.hubot }}"
    restart: unless-stopped
    depends_on:
    - "rocketchat"

    {#############################################################}
    {% if var_use_internal_fluentd %}

    - "fluentd"

    {% endif %}
    {#############################################################}

    environment:
    - ROCKETCHAT_URL=rocketchat:3000
    - LISTEN_ON_ALL_PUBLIC=true
    - ROCKETCHAT_ROOM={{ params.hubot_room }}
    - ROCKETCHAT_USER={{ params.hubot_user }}
    - ROCKETCHAT_PASSWORD=$HUBOT_PASSWORD
    - BOT_NAME={{ params.hubot_bot_name }}
    - EXTERNAL_SCRIPTS=hubot-help,hubot-seen,hubot-links,hubot-diagnostics
    networks:
    - "shared"

    {#############################################################}
    {% if var_local %}

    extra_hosts:
      host.docker.internal: host-gateway

    {% endif %}
    {#############################################################}

    volumes:
    - "$DATA_DIR/hubot/scripts:/home/hubot/scripts"
    logging: *mainlog

    {#############################################################}
    {% if (params.memory.hubot | default('')) != '' %}

    mem_limit: "{{ params.memory.hubot }}"

    {% endif %}
    {#############################################################}

  {% endif %}
  {#############################################################}

  {#############################################################}
  {% if var_use_mongo_express %}

  mongo_express:
    container_name: "${CTX_PREFIX_MAIN}mongo_express"
    hostname: "mongo_express"
    build:
      context: .
      dockerfile: "shared/containers/mongo-express/Dockerfile"
      args:
        IMAGE: "{{ params.images.mongo_express }}"
    restart: "unless-stopped"

    {#############################################################}
    {% if var_use_internal_fluentd %}

    depends_on:
    - "fluentd"

    {% endif %}
    {#############################################################}

    environment:
      ME_CONFIG_OPTIONS_EDITORTHEME: ambiance
      ME_CONFIG_MONGODB_SERVER: {{ params.db_host }}
      ME_CONFIG_MONGODB_PORT: {{ params.db_port }}
      ME_CONFIG_MONGODB_ADMINUSERNAME: {{ params.db_gui_user }}


      {#############################################################}
      {% if params.use_secrets | bool %}

      ME_CONFIG_MONGODB_ADMINPASSWORD_FILE: "/run/secrets/db_gui_password"

      {% else %}

      ME_CONFIG_MONGODB_ADMINPASSWORD: $DB_GUI_PASSWORD

      {% endif %}
      {#############################################################}

    {#############################################################}
    {% if params.use_secrets | bool %}

    secrets:
      - "db_gui_password"

    {% endif %}
    {#############################################################}

    networks:
    - "shared"

    {#############################################################}
    {% if var_local %}

    extra_hosts:
      host.docker.internal: host-gateway

    {% endif %}
    {#############################################################}

    logging: *mainlog

    {#############################################################}
    {% if (params.memory.mongo_express | default('')) != '' %}

    mem_limit: "{{ params.memory.mongo_express }}"

    {% endif %}
    {#############################################################}

  {% endif %}
  {#############################################################}

  {#############################################################}
  {% if var_use_theia %}

  theia:
    container_name: "${CTX_PREFIX_MAIN}theia"
    hostname: "theia"
    build:
      context: .
      dockerfile: "shared/containers/theia/Dockerfile"
      args:
        IMAGE: "{{ params.images.theia }}"
    restart: "unless-stopped"
    user: root

    {#############################################################}
    {% if var_use_internal_fluentd %}

    depends_on:
    - "fluentd"

    {% endif %}
    {#############################################################}

    networks:
    - "shared"

    {#############################################################}
    {% if var_local %}

    extra_hosts:
      host.docker.internal: host-gateway

    {% endif %}
    {#############################################################}

    volumes:
    - "$DATA_DIR/.git:/home/project/.git:ro"
    - "$DATA_DIR:/home/project/data:ro"
    - "$DATA_DIR/sync:/home/project/sync:cached"
    - "$DATA_DIR/action:/home/project/action:cached"

    {#############################################################}
    {% if params.local | bool %}

    - "$DATA_DIR/log:/home/project/log:cached"
    - "$DATA_DIR/tmp:/home/project/tmp:cached"

    {% endif %}
    {#############################################################}

    - "$DATA_DIR/tmp/theia:/tmp/main/theia"
    - "$DATA_DIR/tmp/tmp/theia:/tmp/main/tmp/theia"
    logging: *mainlog

    {#############################################################}
    {% if (params.memory.theia | default('')) != '' %}

    mem_limit: "{{ params.memory.theia }}"

    {% endif %}
    {#############################################################}

  {% endif %}
  {#############################################################}

  {#############################################################}
  {% if var_use_minio_gateway %}

  minio_gateway:
    container_name: "${CTX_PREFIX_MAIN}minio_gateway"
    hostname: "minio_gateway"
    build:
      context: .
      dockerfile: "shared/containers/minio-gateway/Dockerfile"
      args:
        IMAGE: "{{ params.images.minio_gateway }}"
    restart: "unless-stopped"
    environment:

      {#############################################################}
      {% if params.use_secrets | bool %}

      MINIO_ACCESS_KEY_FILE: "minio_gateway_access_key"
      MINIO_SECRET_KEY_FILE: "minio_gateway_secret_key"

      {% else %}

      MINIO_ACCESS_KEY: "$MINIO_GATEWAY_ACCESS_KEY"
      MINIO_SECRET_KEY: "$MINIO_GATEWAY_SECRET_KEY"

      {% endif %}
      {#############################################################}

    {#############################################################}
    {% if params.use_secrets | bool %}

    secrets:
      - "minio_gateway_access_key"
      - "minio_gateway_secret_key"

    {% endif %}
    {#############################################################}

    {#############################################################}
    {% if var_use_internal_fluentd %}

    depends_on:
    - "fluentd"

    {% endif %}
    {#############################################################}

    networks:
    - "shared"

    {#############################################################}
    {% if var_local %}

    extra_hosts:
      host.docker.internal: host-gateway

    {% endif %}
    {#############################################################}

    volumes:
    - "$DATA_DIR/minio_gateway:/data"
    - "$DATA_DIR/tmp/minio_gateway:/tmp/main/minio_gateway"
    - "$DATA_DIR/tmp/tmp/minio_gateway:/tmp/main/tmp/minio_gateway"
    logging: *mainlog
    command: "gateway s3 '$MINIO_GATEWAY_ENDPOINT'"

    {#############################################################}
    {% if (params.memory.minio_gateway | default('')) != '' %}

    mem_limit: "{{ params.memory.minio_gateway }}"

    {% endif %}
    {#############################################################}

  {% endif %}
  {#############################################################}

  {#############################################################}
  {% if var_use_mongo %}

  mongo:
    container_name: "${CTX_PREFIX_MAIN}mongo"
    hostname: "mongo"
    build:
      context: .
      dockerfile: "shared/containers/mongo/Dockerfile"
      args:
        IMAGE: "{{ params.images.mongo }}"
    restart: "unless-stopped"

    {#############################################################}
    {% if var_use_internal_fluentd %}

    depends_on:
    - "fluentd"

    {% endif %}
    {#############################################################}

    {#############################################################}
    {% if params.pod_type == 'db' %}

    ports:
      - "{{ params.db_port }}:27017"

    {% endif %}
    {#############################################################}

    environment:
      MONGO_INITDB_ROOT_USERNAME: {{ params.db_root_user }}

      {#############################################################}
      {% if params.use_secrets | bool %}

      MONGO_INITDB_ROOT_PASSWORD_FILE: "/run/secrets/db_root_pass"

      {% else %}

      MONGO_INITDB_ROOT_PASSWORD: $DB_ROOT_PASS

      {% endif %}
      {#############################################################}

    {#############################################################}
    {% if params.use_secrets | bool %}

    secrets:
      - "db_root_pass"

    {% endif %}
    {#############################################################}

    networks:
    - "shared"

    {#############################################################}
    {% if var_local %}

    extra_hosts:
      host.docker.internal: host-gateway

    {% endif %}
    {#############################################################}

    volumes:

    {{ include_scripts() }}

    {#############################################################}
    {% if (params.local | bool) and (params.named_volumes | bool) %}

    - "mongo_db:/data/db"

    {% else %}

    - "$DATA_DIR/mongo/db:/data/db"

    {% endif %}
    {#############################################################}

    - "$DATA_DIR/tmp/mongo:/tmp/main/mongo"
    - "$DATA_DIR/tmp/tmp/mongo:/tmp/main/tmp/mongo"
    logging: *mainlog
    command: mongod --auth --smallfiles --oplogSize 128 --replSet rs0 --storageEngine=mmapv1

    {#############################################################}
    {% if (params.memory.mongo | default('')) != '' %}

    mem_limit: "{{ params.memory.mongo }}"

    {% endif %}
    {#############################################################}

  {% endif %}
  {#############################################################}

  {#############################################################}
  {% if var_use_local_s3 %}

  s3:
    container_name: "${CTX_PREFIX_MAIN}s3"
    hostname: "s3"
    build:
      context: .
      dockerfile: "shared/containers/minio/Dockerfile"
      args:
        IMAGE: "{{ params.images.minio }}"
    restart: "unless-stopped"

    {#############################################################}
    {% if params.use_internal_fluentd | bool %}

    depends_on:
    - "fluentd"

    {% endif %}
    {#############################################################}

    networks:
    - "shared"
    expose:
    - "9000"

    {#############################################################}
    {% if var_local %}

    extra_hosts:
      host.docker.internal: host-gateway

    {% endif %}
    {#############################################################}

    environment:

      {#############################################################}
      {% if params.use_secrets | bool %}

      MINIO_ROOT_USER_FILE: "/run/secrets/local_s3_access_key"
      MINIO_ROOT_PASSWORD_FILE: "/run/secrets/local_s3_secret_key"

      {% else %}

      MINIO_ROOT_USER: $LOCAL_S3_ACCESS_KEY
      MINIO_ROOT_PASSWORD: $LOCAL_S3_SECRET_KEY

      {% endif %}
      {#############################################################}

    {#############################################################}
    {% if params.use_secrets | bool %}

    secrets:
      - "local_s3_access_key"
      - "local_s3_secret_key"

    {% endif %}
    {#############################################################}

    volumes:
    - "$DATA_DIR/s3/data:/data"
    - "$DATA_DIR/tmp/s3:/tmp/main/minio"
    - "$DATA_DIR/tmp/tmp/s3:/tmp/main/tmp/minio"
    logging: *mainlog
    command: "server /data"

    {#############################################################}
    {% if (params.memory.local_s3 | default('')) != '' %}

    mem_limit: "{{ params.memory.local_s3 }}"

    {% endif %}
    {#############################################################}

  {% endif %}
  {#############################################################}

  toolbox:
    container_name: "${CTX_PREFIX_MAIN}toolbox"
    hostname: "toolbox"
    build:
      context: .
      dockerfile: "shared/containers/toolbox/Dockerfile"
      args:
        IMAGE: "{{ params.images.toolbox }}"
    restart: "unless-stopped"

    {#############################################################}
    {% if var_use_internal_fluentd %}

    depends_on:
    - "fluentd"

    {% endif %}
    {#############################################################}

    networks:
    - "shared"

    {#############################################################}
    {% if var_local %}

    extra_hosts:
      host.docker.internal: host-gateway

    {% endif %}
    {#############################################################}

    volumes:
    - "$DATA_DIR:/var/main/data"
    - "$DATA_DIR/tmp:/tmp/main"
    - "$DATA_DIR/log:/var/log/main"

    {#############################################################}
    {% if params.use_internal_ssl | bool %}

    - "./env/ssl:/etc/ssl:ro"

    {% endif %}
    {#############################################################}

    {#############################################################}
    {% if (params.local | bool) and (params.named_volumes | bool) %}

    - "uploads:/var/main/data/rocketchat/uploads"

    {% endif %}
    {#############################################################}

    {{ include_scripts() }}

    logging: *mainlog
    command: "tail -f /dev/null"

    {#############################################################}
    {% if (params.memory.toolbox | default('')) != '' %}

    mem_limit: "{{ params.memory.toolbox }}"

    {% endif %}
    {#############################################################}

  {#############################################################}
  {% if var_use_s3 %}

  s3_cli:
    container_name: "${CTX_PREFIX_MAIN}s3_cli"
    hostname: "s3_cli"
    build:
      context: .
      dockerfile: "shared/containers/{{ params.s3_cli }}/Dockerfile"
      args:
        IMAGE: "{{ params.images[params.s3_cli] }}"
    restart: "unless-stopped"

    {#############################################################}
    {% if var_use_internal_fluentd %}

    depends_on:
    - "fluentd"

    {% endif %}
    {#############################################################}

    networks:
    - "shared"

    {#############################################################}
    {% if var_local %}

    extra_hosts:
      host.docker.internal: host-gateway

    {% endif %}
    {#############################################################}

    volumes:
    - "$DATA_DIR:/var/main/data"
    - "$DATA_DIR/tmp:/tmp/main"
    - "$DATA_DIR/log:/var/log/main"

    {{ include_scripts() }}

    logging: *mainlog
    entrypoint: ""
    command: "tail -f /dev/null"

    {#############################################################}
    {% if (params.memory.s3_cli | default('')) != '' %}

    mem_limit: "{{ params.memory.s3_cli }}"

    {% endif %}
    {#############################################################}

  {% endif %}
  {#############################################################}

  {#############################################################}
  {% if var_use_internal_fluentd %}

  fluentd:
    container_name: "${CTX_PREFIX_MAIN}fluentd"
    hostname: "fluentd"
    build:
      context: .
      dockerfile: "shared/containers/fluentd/Dockerfile"
      args:
        IMAGE: "{{ params.images.fluentd }}"
    restart: "unless-stopped"
    ports:
    - "{{ params.fluentd_port }}:24224"
    - "{{ params.fluentd_port }}:24224/udp"
    networks:
    - "log"

    {#############################################################}
    {% if var_local %}

    extra_hosts:
      host.docker.internal: host-gateway

      {#############################################################}
      {% if params.fluentd_output_plugin == 'elasticsearch' %}

      elasticsearch: host-gateway

      {% endif %}
      {#############################################################}

    {% endif %}
    {#############################################################}

    {#############################################################}
    {% if params.fluentd_output_plugin == 'elasticsearch' %}

    environment:
      ELASTICSEARCH_HOSTNAME: "{{ params.elasticsearch_host | urlsplit('hostname') }}"
      ELASTICSEARCH_PORT: "{{ params.elasticsearch_host | urlsplit('port') }}"

    {% endif %}
    {#############################################################}

    volumes:

    {#############################################################}
    {% if var_fluentd_ssl %}

    - "./env/ssl:/etc/ssl:ro"

    {% endif %}
    {#############################################################}

    - "$DATA_DIR/fluentd/fluent.conf:/fluentd/etc/fluent.conf"
    - "$DATA_DIR/log/fluentd:/var/log/main/fluentd"
    - "$DATA_DIR/tmp/fluentd:/tmp/main/fluentd"
    - "$DATA_DIR/tmp/tmp/fluentd:/tmp/main/tmp/fluentd"
    logging: *jsonlog

    {#############################################################}
    {% if (params.memory.fluentd | default('')) != '' %}

    mem_limit: "{{ params.memory.fluentd }}"

    {% endif %}
    {#############################################################}

  {% endif %}
  {#############################################################}
